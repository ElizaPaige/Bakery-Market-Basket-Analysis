Year-Round Market Basket Analysis:


```{r}
library(arules)
library(arulesViz)
library(tidyverse)
library(lubridate)
library(knitr)
library(kableExtra)
library(arules)
library(readxl)
library(corrplot)
library(DT)

# Compact output settings
opts_chunk$set(
  fig.width = 10,     # Increased from 6
  fig.height = 8,     # Increased from 4
  fig.align = 'center',
  out.width = '100%', 
  echo = FALSE,      
  warning = FALSE,   
  message = FALSE    
)

# Helper function to save high-quality plots with proper dimensions
save_high_quality_plot <- function(plot_obj, filename, width = 10, height = 8, res = 120) {
  png(filename, width = width, height = height, units = "in", res = res)
  print(plot_obj)
  dev.off()
}

library(readxl)

# Load data
YearRound <- read_excel("~/Desktop/BAN 530 Final Project/Data/YearRoundFinal.xlsx")
names(YearRound) <- make.names(names(YearRound), unique = TRUE)
```

Transaction Creation and Market Basket Analysis
```{r}
transactions_df <- YearRound %>%
  select(Name, Lineitem.name) %>%
  distinct()

transaction_list <- split(transactions_df$Lineitem.name, transactions_df$Name)
transactions <- as(transaction_list, "transactions")
```
```{r}
perform_market_basket_analysis <- function(transactions, 
                                           support_threshold = 0.005, 
                                           confidence_threshold = 0.2, 
                                           lift_threshold = 2) {
  # Generate Association Rules
  rules <- apriori(
    transactions,
    parameter = list(
      support = support_threshold,
      confidence = confidence_threshold,
      minlen = 2
    )
  )
  
  # Filter Rules
  significant_rules <- rules[quality(rules)$lift > lift_threshold]
  
  # Sort and Return Top Rules
  if (length(significant_rules) > 0) {
    top_rules <- sort(significant_rules, by = "lift")[1:min(20, length(significant_rules))]
    return(top_rules)
  } else {
    return(NULL)
  }
}

# Execute Market Basket Analysis
market_basket_rules <- perform_market_basket_analysis(transactions)
```
```{r}
# Calculate product revenue
product_revenue <- YearRound %>%
  group_by(Lineitem.name) %>%
  summarize(
    TotalQuantity = sum(Lineitem.quantity, na.rm = TRUE),
    AveragePrice = mean(Lineitem.price, na.rm = TRUE),
    TotalRevenue = sum(Lineitem.quantity * Lineitem.price, na.rm = TRUE),
    TransactionCount = n_distinct(Name),
    .groups = "drop"
  ) %>%
  arrange(desc(TotalRevenue))

# Get top revenue products
top_revenue_products <- product_revenue %>%
  top_n(10, TotalRevenue) %>%
  pull(Lineitem.name)
```

Top Products by Revenue
```{r}
# Display top revenue products
top_rev_table <- product_revenue %>% 
  top_n(10, TotalRevenue) %>% 
  select(Lineitem.name, TotalRevenue, TransactionCount)

knitr::kable(
  top_rev_table,
  col.names = c("Product", "Revenue ($)", "Transaction Count"),
  caption = "Top 10 Revenue-Generating Products",
  digits = 2
)
```

Product Association Analysis
```{r}
if (!is.null(market_basket_rules)) {
  # Create recommendation table
  recommendation_table <- data.frame(
    "If_Customer_Buys" = labels(lhs(market_basket_rules)),
    "Recommend" = labels(rhs(market_basket_rules)),
    "Support_Pct" = round(quality(market_basket_rules)$support * 100, 2),
    "Confidence_Pct" = round(quality(market_basket_rules)$confidence * 100, 2),
    "Lift" = round(quality(market_basket_rules)$lift, 2),
    "Transaction_Count" = quality(market_basket_rules)$count
  )
  
  # Sort by lift (strongest associations first)
  recommendation_table <- recommendation_table[order(-recommendation_table$Lift),]
  
  # Display top 10 recommendations
  knitr::kable(
    recommendation_table[1:10,],
    col.names = c("If Customer Buys", "Recommend", "Support (%)", "Confidence (%)", "Lift", "Transactions"),
    caption = "Top 10 Product Recommendations By Association Strength"
  )
}
```

Enhanced Business Value Analysis
```{r}
if (!is.null(market_basket_rules)) {
  # Convert rules to a data frame for easier handling
  rules_df <- data.frame(
    rules = paste0("{", labels(lhs(market_basket_rules)), "} => {", labels(rhs(market_basket_rules)), "}"),
    lhs = labels(lhs(market_basket_rules)),
    rhs = labels(rhs(market_basket_rules)),
    support = round(quality(market_basket_rules)$support, 6),
    confidence = round(quality(market_basket_rules)$confidence, 6),
    lift = round(quality(market_basket_rules)$lift, 6),
    count = quality(market_basket_rules)$count
  )
  
  # Extract unique products from rules
  rule_products <- unique(c(
    as.character(rules_df$lhs),
    as.character(rules_df$rhs)
  ))
  
  # Clean up product names (remove any {}, quotes, etc.)
  rule_products <- gsub("[{}\"']", "", rule_products)
  
  # Get revenue information for products in rules
  rule_products_revenue <- product_revenue %>%
    filter(Lineitem.name %in% rule_products) %>%
    arrange(desc(TotalRevenue))
  
  # Find high-value associations (rules involving top revenue products)
  top_revenue_items <- product_revenue %>% 
    top_n(20, TotalRevenue) %>%  # Increased from 10 to 20 to catch more items
    pull(Lineitem.name)
  
  high_value_rules <- recommendation_table %>%
    filter(If_Customer_Buys %in% top_revenue_items | Recommend %in% top_revenue_items) %>%
    arrange(desc(Lift))
  
  # Create a function to normalize product names
  normalize_product_name <- function(name) {
    name <- gsub("[{}\"']", "", name)   # Remove braces and quotes
    name <- trimws(name)                # Remove leading/trailing whitespace
    name <- tolower(name)               # Convert to lowercase
    name <- gsub(" - .*$", "", name)    # Remove anything after " - "
    name <- gsub(" discounted$", "", name, ignore.case = TRUE)  # Remove "discounted"
    return(name)
  }
  
  # Create a mapping between normalized names and original names in revenue data
  product_name_mapping <- data.frame(
    original_name = product_revenue$Lineitem.name,
    normalized_name = sapply(product_revenue$Lineitem.name, normalize_product_name),
    revenue = product_revenue$TotalRevenue,
    stringsAsFactors = FALSE
  )
  
  # Function to find revenue by normalized name
  get_revenue_by_normalized_name <- function(product_name) {
    norm_name <- normalize_product_name(product_name)
    matching_products <- product_name_mapping[product_name_mapping$normalized_name == norm_name, ]
    
    if(nrow(matching_products) > 0) {
      # If multiple matches, take the highest revenue
      return(max(matching_products$revenue))
    } else {
      return(0)
    }
  }
  
  # Create improved business value metric with normalized names
  recommendation_value <- recommendation_table %>%
    mutate(
      If_Customer_Buys_Revenue = sapply(If_Customer_Buys, get_revenue_by_normalized_name),
      Recommend_Revenue = sapply(Recommend, get_revenue_by_normalized_name),
      Business_Value_Score = (Lift * Confidence_Pct/100) * 
                            (If_Customer_Buys_Revenue + Recommend_Revenue)/2
    ) %>%
    arrange(desc(Business_Value_Score))
  
  # Save results for further analysis
  write.csv(recommendation_table, "product_recommendations.csv", row.names = FALSE)
  write.csv(high_value_rules, "high_value_recommendations.csv", row.names = FALSE)
  write.csv(recommendation_value, "business_value_recommendations.csv", row.names = FALSE)
}
```

Revenue Analysis of Products in Association Rules
```{r}
if (!is.null(market_basket_rules)) {
  # Check the actual column names in rule_products_revenue
  column_names <- names(rule_products_revenue)
  
  # Use the actual column names but with nicer labels
  knitr::kable(
    head(rule_products_revenue, 10),
    caption = "Top Revenue Products Involved in Associations"
  )
}
```

Recommendations Ranked by Business Value
```{r}
if (!is.null(market_basket_rules)) {
  knitr::kable(
    head(recommendation_value %>% 
         select(If_Customer_Buys, Recommend, Lift, 
              Confidence_Pct, If_Customer_Buys_Revenue,
              Recommend_Revenue, Business_Value_Score), 10),
    col.names = c("If Customer Buys", "Recommend", "Lift", "Confidence (%)", 
                "Revenue", "Reccomended Rev", "Value Score"),
    caption = "Recommendations Ranked by Business Value"
  )
}

```

Category-Specific Analysis
```{r}
# Define a function to analyze product categories
analyze_product_category <- function(category_items, transactions, label, silent = TRUE) {
  if (!silent) cat(paste0("\n\n==== Analysis for ", label, " ====\n"))
  
  # Check if category items exist in transactions
  category_items_in_trans <- category_items[category_items %in% 
                                           unique(unlist(as(transactions, "list")))]
  
  if(length(category_items_in_trans) == 0) {
    if (!silent) cat("No items from this category found in transactions.\n")
    return(NULL)
  }
  
  # Find transactions containing any of the category items
  trans_with_category <- which(sapply(as(transactions, "list"), function(t) {
    any(category_items_in_trans %in% t)
  }))
  
  if(length(trans_with_category) == 0) {
    if (!silent) cat("No transactions found containing items from this category.\n")
    return(NULL)
  }
  
  # Subset transactions
  category_transactions <- transactions[trans_with_category]
  
  if (!silent) {
    cat("Number of transactions containing this category:", length(trans_with_category), "\n")
    cat("Percentage of total transactions:", 
        round(length(trans_with_category)/length(transactions)*100, 2), "%\n\n")
  }
  
  # Run specific analysis for this category
  category_rules <- apriori(
    category_transactions,
    parameter = list(
      support = 0.01,  # Higher support threshold for category-specific analysis
      confidence = 0.2,
      minlen = 2
    )
  )
  
  if (length(category_rules) > 0) {
    # Filter to significant rules
    significant_category_rules <- category_rules[quality(category_rules)$lift > 1.5]
    
    if (length(significant_category_rules) > 0) {
      sorted_rules <- sort(significant_category_rules, by = "lift")
      if (!silent) {
        cat("Top associations within this category (sorted by lift):\n")
        inspect(head(sorted_rules, 10))
      }
      return(sorted_rules)
    }
  }
  return(NULL)
}

# Function to identify product categories
identify_product_categories <- function(products, min_items = 3) {
  # More precise category keywords to avoid overlap
  category_keywords <- list(
    "Danish" = c("Danish$", "danish", "^Danish"),
    "Cookies" = c("Cookie", "Cookies", "cookie", "cookies"),
    "Cakes" = c("Cake$", "Cupcake", "cake$", "cupcake", "cheesecake", "^Cake"),
    "Bread" = c("Bread", "bread", "Loaf", "Roll$", "Rolls$"),
    "Pastry" = c("Croissant", "Eclair", "Tart", "Pie$", "Cannoli", "Napoleon", "pie$"),
    "Muffins" = c("Muffin", "Scone")
  )
  
  # Find products matching each category
  categories <- list()
  for (cat_name in names(category_keywords)) {
    cat_items <- products[sapply(products, function(product) {
      any(sapply(category_keywords[[cat_name]], function(keyword) {
        grepl(keyword, product, ignore.case = TRUE)
      }))
    })]
    
    # Only include categories with sufficient items
    if (length(cat_items) >= min_items) {
      categories[[cat_name]] <- cat_items
    }
  }
  
  return(categories)
}

# Get unique products and identify categories
unique_products <- unique(unlist(as(transactions, "list")))
product_categories <- identify_product_categories(unique_products)

# Run analysis for each category
category_rules_list <- list()
for (category_name in names(product_categories)) {
  category_rules_list[[category_name]] <- analyze_product_category(
    product_categories[[category_name]], 
    transactions, 
    category_name,
    silent = TRUE
  )
}

# Save category analysis results to files
for (category_name in names(category_rules_list)) {
  if (!is.null(category_rules_list[[category_name]])) {
    # Create dataframe
    cat_rules_df <- data.frame(
      rules = paste0("{", labels(lhs(category_rules_list[[category_name]])), "} => {", 
                   labels(rhs(category_rules_list[[category_name]])), "}"),
      lhs = labels(lhs(category_rules_list[[category_name]])),
      rhs = labels(rhs(category_rules_list[[category_name]])),
      support = quality(category_rules_list[[category_name]])$support,
      confidence = quality(category_rules_list[[category_name]])$confidence,
      lift = quality(category_rules_list[[category_name]])$lift,
      count = quality(category_rules_list[[category_name]])$count
    )
    
    # Save to file
    write.csv(cat_rules_df, 
             paste0(gsub(" ", "_", tolower(category_name)), "_rules.csv"), 
             row.names = FALSE)
  }
}
```


Top Revenue Product Analysis
```{r}
analyze_item_associations <- function(target_item, transactions, min_support = 0.003) {
  item_rules <- apriori(
    transactions,
    parameter = list(
      support = min_support,
      confidence = 0.1,
      minlen = 2
    ),
    appearance = list(
      rhs = target_item,
      default = "lhs"
    )
  )
  
  if (length(item_rules) > 0) {
    item_rules_lift <- item_rules[quality(item_rules)$lift > 1.1]
    
    if (length(item_rules_lift) > 0) {
      sorted_rules <- sort(item_rules_lift, by = "lift")
      return(sorted_rules)
    }
  }
  return(NULL)
}
# Analyze associations with top revenue product
top_product <- top_revenue_products[1]  # "1lb Assorted Butter Cookies"
top_product_rules <- analyze_item_associations(top_product, transactions)

# Helper function that was used
analyze_item_associations <- function(target_item, transactions, min_support = 0.003) {
  item_rules <- apriori(
    transactions,
    parameter = list(
      support = min_support,
      confidence = 0.1,
      minlen = 2
    ),
    appearance = list(
      rhs = target_item,
      default = "lhs"
    )
  )
  
  if (length(item_rules) > 0) {
    item_rules_lift <- item_rules[quality(item_rules)$lift > 1.1]
    
    if (length(item_rules_lift) > 0) {
      sorted_rules <- sort(item_rules_lift, by = "lift")
      return(sorted_rules)
    }
  }
  return(NULL)
}
```
```{r}
if (!is.null(top_product_rules)) {
  # Create data frame from rules
  top_product_df <- data.frame(
    "Product" = labels(lhs(top_product_rules)),
    "Leads_To_Purchase_Of" = rep(top_product, length(top_product_rules)),
    "Support_Pct" = round(quality(top_product_rules)$support * 100, 2),
    "Confidence_Pct" = round(quality(top_product_rules)$confidence * 100, 2),
    "Lift" = round(quality(top_product_rules)$lift, 2)
  )
  
  # Display table
  cat("## Products Leading to Purchase of", top_product, "\n\n")
  knitr::kable(
    top_product_df,
    col.names = c("Product", "Leads to Purchase Of", "Support (%)", "Confidence (%)", "Lift"),
    caption = paste("Products That Lead to", top_product, "Purchases")
  )
}
```


```{r}
# Save final rules to CSV
if (!is.null(market_basket_rules)) {
  rules_df <- data.frame(
    lhs = labels(lhs(market_basket_rules)),
    rhs = labels(rhs(market_basket_rules)),
    support = round(quality(market_basket_rules)$support, 6),
    confidence = round(quality(market_basket_rules)$confidence, 6),
    lift = round(quality(market_basket_rules)$lift, 6),
    count = quality(market_basket_rules)$count
  )
write.csv(rules_df, "bakery_association_rules.csv", row.names = FALSE)
}
```


Additional: # 1. Visualizing Association Rules with Different Plot Types
```{r}
# Plot support vs confidence with lift as color
if (!is.null(market_basket_rules) && length(market_basket_rules) > 0) {
  # Create scatter plot (returns a ggplot object)
  scatter_plot <- plot(market_basket_rules, 
                       method = "scatterplot", 
                       measure = c("support", "confidence"),
                       shading = "lift",
                       main = "Scatter Plot of Association Rules",
                       jitter = 0.01,
                       engine = "ggplot2")
  
  # Now modify the ggplot object with proper ggplot parameters
  scatter_plot <- scatter_plot +
    ggplot2::theme_minimal() +
    ggplot2::geom_point(size = 3, alpha = 0.7) +  # Larger points with transparency
    ggplot2::scale_color_gradient(low = "skyblue", high = "blue4") +  # Color gradient
    ggplot2::theme(
      plot.title = ggplot2::element_text(size = 14, face = "bold"),
      axis.title = ggplot2::element_text(size = 12)
    )
  
  # Display the modified plot
  print(scatter_plot)
  
  # Save high-quality version
  ggplot2::ggsave("scatter_rules.png", plot = scatter_plot, width = 10, height = 8, dpi = 300)
}
```

```{r}
# Graph visualization of top rules
if (!is.null(market_basket_rules) && length(market_basket_rules) > 5) {
  # Limit to a smaller set for clearer visualization
  top_viz_rules <- head(sort(market_basket_rules, by = "lift"), 10)
  
  # Save dimensions for the plot
  png("network_rules.png", width = 12, height = 10, units = "in", res = 300)
  
  # Graph-based visualization with compatible settings
  plot(top_viz_rules, 
       method = "graph", 
       control = list(
         layout = "circle",       # Valid layout option
         max = 10,                # Limit number of rules
         colors = c("#4682B4", "#A9A9A9")  # Node and edge colors
       ),
       main = "Network of Top Association Rules")
  
  # Close the device
  dev.off()
  
  # Display the plot in the R document
  plot(top_viz_rules, 
       method = "graph", 
       control = list(
         layout = "circle",
         max = 10,
         colors = c("#4682B4", "#A9A9A9")
       ),
       main = "Network of Top Association Rules")
}
```

```{r}
# Grouped matrix visualization
if (!is.null(market_basket_rules) && length(market_basket_rules) > 0) {
  # Matrix visualization with minimal settings to prevent overlap
  plot(market_basket_rules, 
       method = "grouped", 
       control = list(
         k = min(6, length(market_basket_rules)),
         lhs_label_items = 1,
         rhs_max = 3
       ))
  
  # Save high-quality version
  png("grouped_matrix.png", width = 10, height = 8, units = "in", res = 300)
  plot(market_basket_rules, 
       method = "grouped", 
       control = list(k = min(6, length(market_basket_rules))))
  dev.off()
}
```

Additional: 2. Itemset Frequency Analysis
```{r}
library(arules)

# First, analyze the distribution of items per transaction
transaction_sizes <- size(transactions)
size_distribution <- table(transaction_sizes)

cat("Distribution of items per transaction:\n")
print(size_distribution)
cat("\nPercentage of single-item transactions: ", 
    round(size_distribution["1"] / length(transactions) * 100, 2), "%\n\n")

# PART 1: Get the frequent single items
single_items <- apriori(transactions, 
                       parameter = list(
                         target = "frequent itemsets", 
                         support = 0.01, 
                         minlen = 1,
                         maxlen = 1
                       ))
single_items <- sort(single_items, by = "support", decreasing = TRUE)

# Display single items
single_items_df <- data.frame(
  itemsets = labels(items(single_items)),
  support = quality(single_items)$support,
  count = quality(single_items)$count
)

knitr::kable(
  head(single_items_df, 10),
  col.names = c("Popular Single Items", "Support", "Count"),
  caption = "Most Popular Individual Items",
  digits = 4
)

# PART 2: Find frequent combinations (support ≥ 0.2%)
item_combinations <- apriori(transactions, 
                           parameter = list(
                             target = "frequent itemsets", 
                             support = 0.002,
                             minlen = 2,
                             maxlen = 3
                           ))

if (length(item_combinations) > 0) {
  # Sort by support and keep top 15
  item_combinations <- sort(item_combinations, by = "support", decreasing = TRUE)[1:15]

  # Prepare data frame
  item_labels <- labels(item_combinations)
  item_support <- quality(item_combinations)$support
  item_count <- quality(item_combinations)$support * length(transactions)

  item_comb_df <- data.frame(
    itemset = item_labels,
    support = round(item_support, 4),
    count = as.integer(item_count),
    stringsAsFactors = FALSE
  )

  # Get rules for confidence & lift
  all_rules <- apriori(transactions,
                       parameter = list(
                         support = 0.002,
                         confidence = 0.01,
                         minlen = 2,
                         maxlen = 2,
                         target = "rules"
                       ))

  item_comb_df$confidence <- NA
  item_comb_df$lift <- NA

  for (i in 1:nrow(item_comb_df)) {
    items_i <- unlist(strsplit(gsub("[\\{\\}]", "", item_comb_df$itemset[i]), ","))
    items_i <- trimws(items_i)

    if (length(items_i) == 2) {
      lhs1 <- items_i[1]
      rhs1 <- items_i[2]
      lhs2 <- items_i[2]
      rhs2 <- items_i[1]

      match1 <- subset(all_rules, lhs %pin% lhs1 & rhs %pin% rhs1)
      match2 <- subset(all_rules, lhs %pin% lhs2 & rhs %pin% rhs2)

      if (length(match1) > 0) {
        item_comb_df$confidence[i] <- round(quality(match1)$confidence[1], 4)
        item_comb_df$lift[i] <- round(quality(match1)$lift[1], 4)
      } else if (length(match2) > 0) {
        item_comb_df$confidence[i] <- round(quality(match2)$confidence[1], 4)
        item_comb_df$lift[i] <- round(quality(match2)$lift[1], 4)
      }
    }
  }

  # Display results
  knitr::kable(
    item_comb_df,
    col.names = c("Item Combination", "Support", "Count", "Confidence", "Lift"),
    caption = "Top Item Combinations (Support ≥ 0.2%) with Confidence & Lift",
    digits = 4
  )

} else {
  cat("No item combinations found even with a low support threshold of 0.2%.\n")

  # Try ultra-low threshold (0.1%)
  ultra_rare_combinations <- apriori(transactions, 
                                   parameter = list(
                                     target = "frequent itemsets", 
                                     support = 0.001,
                                     minlen = 2,
                                     maxlen = 2
                                   ))
  
  if (length(ultra_rare_combinations) > 0) {
    ultra_rare_combinations <- sort(ultra_rare_combinations, by = "support", decreasing = TRUE)

    rare_df <- data.frame(
      itemsets = labels(items(ultra_rare_combinations)),
      support = quality(ultra_rare_combinations)$support,
      count = quality(ultra_rare_combinations)$count
    )

    knitr::kable(
      head(rare_df, 10),
      col.names = c("Rare Item Combination", "Support", "Count"),
      caption = "Very Rare Item Combinations (Support ≥ 0.1%)",
      digits = 4
    )
  } else {
    cat("No combinations found even with an ultra-low threshold of 0.1%.\n")
    cat("This suggests customers almost always purchase single items in this dataset.\n")
  }
}

# PART 3: Multi-item transactions
multi_item_trans <- transactions[size(transactions) >= 2]

if (length(multi_item_trans) > 0) {
  cat("\nAnalyzing", length(multi_item_trans), "multi-item transactions specifically:\n")

  multi_item_combos <- apriori(multi_item_trans, 
                              parameter = list(
                                target = "frequent itemsets", 
                                support = 0.05,
                                minlen = 2,
                                maxlen = 3
                              ))

  if (length(multi_item_combos) > 0) {
    multi_item_combos <- sort(multi_item_combos, by = "support", decreasing = TRUE)

    multi_df <- data.frame(
      itemsets = labels(items(multi_item_combos)),
      support = quality(multi_item_combos)$support,
      count = quality(multi_item_combos)$count,
      overall_support = round(quality(multi_item_combos)$count / length(transactions), 4)
    )

    knitr::kable(
      head(multi_df, 10),
      col.names = c("Item Combination", "Support (in multi-item trans.)", "Count", "Overall Support"),
      caption = "Common Combinations in Multi-Item Transactions",
      digits = 4
    )
  } else {
    cat("No common combinations found in multi-item transactions with 5% support.\n")
  }
}


```


Additional: 3. Product Affinity Analysis
```{r}
# Create item frequency data
item_frequency <- itemFrequency(transactions)
item_freq_sorted <- sort(item_frequency, decreasing = TRUE)

# FIXED VISUALIZATION - More readable barplot of top items
# Get only top 15 items to prevent overcrowding
top_items <- head(item_freq_sorted, 15)

# Create a dataframe for better ggplot visualization
top_items_df <- data.frame(
  item = names(top_items),
  frequency = as.numeric(top_items)
) %>%
  # Sort by frequency
  arrange(desc(frequency)) %>%
  # Shorten names if needed (first 25 characters)
  mutate(short_name = ifelse(nchar(item) > 25, 
                             paste0(substr(item, 1, 22), "..."), 
                             item))

# Create a better-looking plot with ggplot
ggplot(top_items_df, aes(x = reorder(short_name, frequency), y = frequency)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +  # Flip to horizontal to prevent label overlap
  labs(
    title = "Frequency of Top 15 Products",
    x = "Products",
    y = "Frequency",
    caption = "Note: Product names may be truncated for display"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 10),  # Larger text for product names
    plot.title = element_text(size = 14, face = "bold"),
    panel.grid.minor = element_blank()  # Remove minor grid lines
  )

# Optionally save a high-quality version
ggsave("product_frequency.png", width = 10, height = 8)
```

Additional: 4. Item Pairs Analysis with Lift
```{r}
# Create custom pairs analysis function
analyze_item_pairs <- function(transactions, min_support = 0.005) {
  # Find all 2-item rules
  item_pairs <- apriori(
    transactions,
    parameter = list(
      support = min_support,
      confidence = 0.1,
      minlen = 2,
      maxlen = 2
    )
  )
  
  if (length(item_pairs) > 0) {
    # Filter by lift
    significant_pairs <- item_pairs[quality(item_pairs)$lift > 1.5]
    
    if (length(significant_pairs) > 0) {
      # Sort by lift
      sorted_pairs <- sort(significant_pairs, by = "lift", decreasing = TRUE)
      return(sorted_pairs)
    }
  }
  return(NULL)
}

# Run the item pairs analysis
item_pair_rules <- analyze_item_pairs(transactions)

# Display pairs in a matrix format - FIXED FOR OVERLAP ISSUES
if (!is.null(item_pair_rules) && length(item_pair_rules) > 0) {
  # Create a matrix to store item pair lift values
  # REDUCED number of items from 15 to 10 to prevent overlap
  top_items <- names(head(item_freq_sorted, 10))  
  lift_matrix <- matrix(NA, nrow = length(top_items), ncol = length(top_items))
  rownames(lift_matrix) <- top_items
  colnames(lift_matrix) <- top_items
  
  # Fill matrix with lift values from rules
  for (i in 1:length(item_pair_rules)) {
    lhs_item <- gsub("[{}]", "", labels(lhs(item_pair_rules[i])))
    rhs_item <- gsub("[{}]", "", labels(rhs(item_pair_rules[i])))
    
    if (lhs_item %in% top_items && rhs_item %in% top_items) {
      lift_matrix[lhs_item, rhs_item] <- quality(item_pair_rules[i])$lift
    }
  }
  
  # IMPROVED LAYOUT: Create a heatmap of the lift values with better settings
  png("item_pairs_lift.png", width = 10, height = 8, units = "in", res = 120)
  corrplot::corrplot(lift_matrix, 
                     is.corr = FALSE, 
                     method = "color", 
                     tl.col = "black", 
                     tl.cex = 0.6,        # Smaller text
                     tl.srt = 45,         # Rotate labels
                     na.label = " ",
                     addCoef.col = "black",
                     number.cex = 0.5,    # Smaller numbers
                     col = colorRampPalette(c("white", "red"))(100),  # Better color gradient
                     title = "Lift Values Between Top Items",
                     mar = c(0,0,2,6))    # Adjust margins
  dev.off()
  
  # Display the plot in the RMarkdown document
  corrplot::corrplot(lift_matrix, 
                     is.corr = FALSE, 
                     method = "color", 
                     tl.col = "black", 
                     tl.cex = 0.6,
                     tl.srt = 45,
                     na.label = " ",
                     addCoef.col = "black",
                     number.cex = 0.5,
                     col = colorRampPalette(c("white", "red"))(100),
                     title = "Lift Values Between Top Items",
                     mar = c(0,0,2,6))
}
```

Additional: 6. Enhanced Market Basket Metrics
```{r}
# Calculate additional metrics for product associations
if (!is.null(market_basket_rules) && length(market_basket_rules) > 0) {
  # Create the basic metrics dataframe first
  enhanced_metrics <- data.frame(
    lhs = labels(lhs(market_basket_rules)),
    rhs = labels(rhs(market_basket_rules)),
    support = quality(market_basket_rules)$support,
    confidence = quality(market_basket_rules)$confidence,
    lift = quality(market_basket_rules)$lift
  )
  
  # Add count if available
  if (!is.null(quality(market_basket_rules)$count)) {
    enhanced_metrics$count <- quality(market_basket_rules)$count
  }
  
  # Try adding conviction
  tryCatch({
    enhanced_metrics$conviction <- quality(market_basket_rules)$conviction
  }, error = function(e) {
    cat("Note: Conviction metric calculation failed.\n")
  })
  
  # Try adding leverage
  tryCatch({
    enhanced_metrics$leverage <- interestMeasure(market_basket_rules, 
                                              measure = "leverage", 
                                              transactions = transactions)
  }, error = function(e) {
    cat("Note: Leverage metric calculation failed.\n")
  })
  
  # Try adding kulczynski
  tryCatch({
    enhanced_metrics$kulczynski <- interestMeasure(market_basket_rules, 
                                                measure = "kulczynski", 
                                                transactions = transactions)
  }, error = function(e) {
    cat("Note: Kulczynski metric calculation failed.\n")
  })
  
  # Extract product types from product names
  extract_product_type <- function(product_name) {
    # Remove leading/trailing whitespace and convert to lowercase
    product_name <- tolower(trimws(product_name))
    
    # Remove braces and quotes if they exist
    product_name <- gsub("[{}\"']", "", product_name)
    
    # Define common product types to extract
    product_types <- c(
      "danish", "cookie", "croissant", "cake", "bread", "bun", "muffin", 
      "tart", "pie", "roll", "pastry", "donut", "brownie", "scone", 
      "cupcake", "loaf", "coffee", "tea", "beverage"
    )
    
    # Check if any of the product types are in the product name
    for (type in product_types) {
      if (grepl(type, product_name)) {
        return(type)
      }
    }
    
    # If no match found, return the first word as a fallback
    first_word <- strsplit(product_name, " ")[[1]][1]
    return(first_word)
  }
  
  # Add product type columns
  enhanced_metrics$lhs_type <- sapply(enhanced_metrics$lhs, extract_product_type)
  enhanced_metrics$rhs_type <- sapply(enhanced_metrics$rhs, extract_product_type)
  
  # Filter to keep only rules between different product types
  diverse_rules <- enhanced_metrics[enhanced_metrics$lhs_type != enhanced_metrics$rhs_type, ]
  
  # Sort by lift (always available)
  diverse_rules <- diverse_rules %>% arrange(desc(lift))
  
  # If we have diverse rules, display them
  if (nrow(diverse_rules) > 0) {
    # Get actual column names, excluding the type columns we added for filtering
    actual_cols <- setdiff(colnames(diverse_rules), c("lhs_type", "rhs_type"))
    
    # Create nicer display names for the columns we have
    display_names <- actual_cols
    display_names[display_names == "lhs"] <- "If Customer Buys"
    display_names[display_names == "rhs"] <- "Recommend"
    display_names[display_names == "support"] <- "Support"
    display_names[display_names == "confidence"] <- "Confidence"
    display_names[display_names == "lift"] <- "Lift"
    display_names[display_names == "count"] <- "Count"
    display_names[display_names == "conviction"] <- "Conviction" 
    display_names[display_names == "leverage"] <- "Leverage"
    display_names[display_names == "kulczynski"] <- "Kulczynski"
    
    # Display diverse product associations
    knitr::kable(
      head(diverse_rules[, actual_cols], 10),
      col.names = display_names,
      caption = "Top Product Associations Between Different Product Types",
      digits = 4
    )
  } else {
    cat("No associations between different product types were found with the current thresholds.")
  }
}
```

Additional: 7. Basket Size Analysis
```{r}
# Analyze basket sizes
basket_sizes <- size(transactions)

# Summarize basket sizes
basket_summary <- data.frame(
  Size = 1:max(basket_sizes),
  Frequency = tabulate(basket_sizes, nbins = max(basket_sizes))
)

# Calculate percentages
basket_summary$Percentage <- basket_summary$Frequency / length(transactions) * 100

# Display basket size distribution
knitr::kable(
  basket_summary,
  col.names = c("Items per Basket", "Number of Baskets", "Percentage"),
  caption = "Distribution of Basket Sizes",
  digits = 2
)

# IMPROVED VISUALIZATION - Fix for overlap in basket size plot
library(ggplot2)

# For baskets with size > 10, group them as "11+"
if(max(basket_sizes) > 10) {
  large_baskets <- basket_summary[basket_summary$Size > 10, ]
  compressed_summary <- basket_summary[basket_summary$Size <= 10, ]
  compressed_summary <- rbind(
    compressed_summary,
    data.frame(
      Size = 11,
      Frequency = sum(large_baskets$Frequency),
      Percentage = sum(large_baskets$Percentage)
    )
  )
  size_labels <- c(as.character(1:10), "11+")
} else {
  compressed_summary <- basket_summary
  size_labels <- as.character(1:max(basket_sizes))
}

# Create data frame for plotting
plot_data <- data.frame(
  Size = factor(size_labels, levels = size_labels),
  Count = compressed_summary$Frequency,
  Percentage = compressed_summary$Percentage
)

# Create ggplot
ggplot(plot_data, aes(x = Size, y = Count)) +
  geom_bar(stat = "identity", fill = "steelblue", width = 0.7) +
  geom_text(aes(label = paste0(round(Percentage, 1), "%")), 
            vjust = -0.5, size = 3.5) +
  labs(
    title = "Distribution of Items per Basket",
    x = "Number of Items",
    y = "Number of Baskets"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 0)
  )
```


Additional: 10. Interactive Report Creation 
```{r}
# Create a complete association rules report
all_rules_report <- data.frame(
  Rule = paste0(labels(lhs(market_basket_rules)), " => ", labels(rhs(market_basket_rules))),
  Support = round(quality(market_basket_rules)$support, 4),
  Confidence = round(quality(market_basket_rules)$confidence, 4),
  Lift = round(quality(market_basket_rules)$lift, 4),
  Count = quality(market_basket_rules)$count
)

# Write to CSV
write.csv(all_rules_report, "complete_market_basket_report.csv", row.names = FALSE)

# ENHANCED VISUALIZATION: Create an interactive datatable showing all results on one page
if (requireNamespace("DT", quietly = TRUE) && requireNamespace("htmlwidgets", quietly = TRUE) && !is.null(market_basket_rules)) {
  # Format data for better display
  display_rules <- data.frame(
    LHS = gsub("\\{|\\}", "", labels(lhs(market_basket_rules))),
    RHS = gsub("\\{|\\}", "", labels(rhs(market_basket_rules))),
    Support = paste0(round(quality(market_basket_rules)$support * 100, 2), "%"),
    Confidence = paste0(round(quality(market_basket_rules)$confidence * 100, 2), "%"),
    Lift = round(quality(market_basket_rules)$lift, 2),
    Count = quality(market_basket_rules)$count
  )
  
  # Create interactive table with all entries on one page
  dt <- DT::datatable(
    display_rules,
    caption = "Interactive Market Basket Rules",
    options = list(
      pageLength = -1,  # Show all rows
      scrollY = "600px", # Add vertical scrolling with fixed height
      scrollX = TRUE,    # Enable horizontal scrolling for wide tables
      dom = 'Bfrtip',    # Add button controls
      columnDefs = list(
        list(width = '200px', targets = c(0, 1)),  # Set wider width for product columns
        list(className = 'dt-center', targets = c(2, 3, 4, 5))  # Center-align numeric columns
      ),
      buttons = c('copy', 'csv', 'excel')  # Add export buttons
    ),
    rownames = FALSE,
    filter = 'top',  # Add filtering capability
    class = 'cell-border stripe hover'  # Add styling
  ) %>%
  # Add visual formatting based on lift values
  DT::formatStyle(
    'Lift',
    background = DT::styleColorBar(c(1, max(quality(market_basket_rules)$lift)), 'steelblue'),
    backgroundSize = '95% 85%',
    backgroundRepeat = 'no-repeat',
    backgroundPosition = 'center'
  )
  
  # Save the widget as a standalone HTML file
  htmlwidgets::saveWidget(
    widget = dt,
    file = "market_basket_interactive_full.html",
    selfcontained = TRUE  # Makes a standalone HTML file
  )
  
  # Display the widget in the R environment
  dt
}

# ADDITIONAL VISUALIZATION: Create a downloadable high-resolution plot of top rules
if (!is.null(market_basket_rules) && length(market_basket_rules) > 0) {
  # Get top rules by lift
  top_rules <- head(sort(market_basket_rules, by = "lift"), 8)
  
  # Set up plotting area with appropriate dimensions
  png("top_rules_network.png", width = 10, height = 8, units = "in", res = 300)
  
  # Create network visualization with only compatible parameters
  plot(top_rules, method = "graph",
       control = list(
         layout = "circle",    # Valid: circle layout
         max = 8,              # Valid: limit number of rules shown
         colors = c("#ADD8E6", "#B0B0B0")  # Valid: lightblue and gray equivalent
       ))
  
  dev.off()
  
  # Include a reference to the plot
  cat("Network visualization of top rules saved as 'top_rules_network.png'\n")
  cat("Interactive market basket table saved as 'market_basket_interactive_full.html'\n")
}
```
